# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a8ynzk-t4HMxF3oBOIvQrme9pi5fnEE7

**Loading the modules**
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
import os
import cv2
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import seaborn as sns
from sklearn.metrics import accuracy_score, classification_report

"""**Loading the data**"""

from google.colab import drive
drive.mount('/content/drive')

!unzip "/content/drive/MyDrive/Architecture.zip" -d "/content/drive/MyDrive/Architectures"

path = os.listdir('/content/drive/MyDrive/Architectures')
classes = {'Palladian architecture':0, 'Greek Revival architecture':1}

"""**Pre-processing**"""

X = []
Y = []
for cls in classes:
    pth = '/content/drive/MyDrive/Architectures/'+cls
    for j in os.listdir(pth):
        img = cv2.imread(pth+'/'+j, 0)
        img = cv2.resize(img, (200,200))
        X.append(img)
        Y.append(classes[cls])

X = np.array(X)
Y = np.array(Y)
X_updated = X.reshape(len(X), -1)

np.unique(Y)

pd.Series(Y).value_counts()

X.shape, X_updated.shape

"""**Split the data as training and testing**"""

xtrain, xtest, ytrain, ytest = train_test_split(X_updated, Y, random_state=10,test_size=.15,stratify=Y)

xtrain.shape, xtest.shape

print(xtrain.max(), xtrain.min())
print(xtest.max(), xtest.min())
xtrain = xtrain/255
xtest = xtest/255
print(xtrain.max(), xtrain.min())
print(xtest.max(), xtest.min())

"""**Train the model**"""

sv = SVC()
sv.fit(xtrain, ytrain)

print("Training Score:", sv.score(xtrain, ytrain))
print("Testing Score:", sv.score(xtest, ytest))

y_pred = sv.predict(xtest)

accuracy = accuracy_score(ytest, y_pred)
print(f"Accuracy: {accuracy:.2f}")

print("Classification Report:\n", classification_report(ytest, y_pred))

conf = confusion_matrix(ytest,y_pred)
plt.figure(figsize=(6,6))
sns.heatmap(conf, annot=True, fmt='d',cmap='Greens',xticklabels=classes,yticklabels=classes)
plt.xlabel('Predicted Label')
plt.ylabel('Actual Label')
plt.title('Confusion Matrix')
plt.show()